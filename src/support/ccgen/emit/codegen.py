from os import path

from .filewriter import FileWriter, block_comment

class CodeGen:
    def __init__(self, info, definitions, source, header, inl, sourceroot):
        self.info = info

        self.defs = path.relpath(definitions, sourceroot)
        self.source = source
        self.header = header
        self.inl = inl
        self.sourceroot = sourceroot

        # header file writer
        self.h = FileWriter()

        # source file writer
        self.s = FileWriter()

        # inline file writer
        self.i = FileWriter()

        public = path.relpath(header, sourceroot)

        self.add_public_headers([ 'core/compiler.h' ])
        self.add_private_headers([ public, 'base/panic.h' ])

    def add_public_headers(self, headers):
        self.h.add_headers(headers)

    def add_private_headers(self, headers):
        self.s.add_headers(headers)

    def get_prefix(self) -> str:
        return self.info['id']

    def gen_public_prelude(self):
        block_comment(self.h, f'''
            |autogenerated from {self.defs} by ccgen.py, do not edit directly
        ''')

        self.h.newline()
        self.h.writeln(f'#pragma once')
        self.h.emit_headers()
        self.h.writeln('CT_BEGIN_API')
        self.h.newline()

        block_comment(self.i, f'''
            |autogenerated from {self.defs} by ccgen.py, do not edit directly
        ''')

        self.i.newline()

    def gen_public_epilogue(self):
        self.h.newline()
        self.h.writeln('CT_END_API')

    def gen_private_prelude(self):
        block_comment(self.s, f'''
            |autogenerated from {self.defs} by ccgen.py, do not edit directly
        ''')
        self.s.emit_headers()

    def gen_private_epilogue(self):
        pass

    def finish(self):
        self.h.save(self.header)
        self.s.save(self.source)
        self.i.save(self.inl)
