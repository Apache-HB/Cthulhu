type LPSTR = str;
type DWORD = uint;
type BOOL = int;

struct Arena {
    name: str;
    alloc: def(*Arena, usize) -> opaque;
    release: def(*Arena, opaque) -> void;
}

export struct System {
    name: str;
}

variant MemoryType {
    default Invalid = 99
    case Heap = 1
    case Stack = 2
    case Data = 3
    case Code = 4
    case Other = 5
}

struct Memory {
    name: str;
    bytes: usize;
    kind: MemoryType;
}

@extern("printf")
def printf(fmt: str, args: ...): int;

@extern("malloc")
def libcAlloc(size: usize): opaque;

@extern("free")
def libcRelease(ptr: opaque);

@extern("GetComputerNameA")
def win32GetComputerNameA(name: str, size: *DWORD): BOOL;

def printMemory(mem: Memory) {
    printf("[%s] %zu bytes\n", mem.name, mem.bytes);
}

def defaultAlloc(mem: *Arena, size: usize): opaque {
    printf("[%s] alloc %zu\n", mem->name, size);
    return libcAlloc(size);
}

def defaultRelease(mem: *Arena, ptr: opaque) {
    printf("[%s] release %p\n", mem->name, ptr);
    libcRelease(ptr);
}

export def defaultArena(name: str): Arena = .{
    name = name,
    alloc = defaultAlloc,
    release = defaultRelease
};

def arenaAlloc(mem: *Arena, size: usize): opaque {
    return mem->alloc(mem, size);
}

def arenaRelease(mem: *Arena, ptr: opaque) {
    mem->release(mem, ptr);
}

def getComputerName(mem: *Arena): str {
    var size: DWORD = 256u;
    var name: str = arenaAlloc(mem, size);
    if win32GetComputerNameA(name, &size) == 0 {
        return "Unknown";
    }

    return name;
}

export def newSystem(mem: *Arena): System = .{
    name = getComputerName(mem)
};

export def getSystemName(system: System): str = system.name;

@entry(cli)
def main {
    var mem = defaultArena("libc");

    const system = newSystem(&mem);
    printf("System name: %s\n", getSystemName(system));

    printMemory(.{
        name = "example", 
        bytes = 0x1000,
        kind = Heap
    });
}
