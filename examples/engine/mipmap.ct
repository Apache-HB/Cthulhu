import std::math(float2, float4, uint3);
import stdx::gpu(ConstantBuffer, SamplerState, Texture2D, RWTexture2D);
import stdx::gpu::sm6(reg, ComputeThreads, CsMain, DispatchThreadID);

struct ConstBuffer {
    size: float2;
}

@reg(ns = texture, slot = 0)
const src: Texture2D!<float4>;

@reg(ns = uav, slot = 0)
var dst: RWTexture2D!<float4>;

@reg(ns = sampler, slot = 0)
const sampler: SamplerState;

@reg(ns = cbuffer, slot = 0)
const cb: ConstantBuffer!<ConstBuffer>;

def getTexel(coords: float2): float4 {
    const texcoords = cb.size * coords + 0.5;
    const colour = src.sample(sampler, texcoords, 0);

    return colour;
}

@[ComputeThreads(32, 32, 1), CsMain]
def genMipMap(@DispatchThreadID id : uint3) {
    dst[id.xy] = getTexel(float2(id.xy));
}
