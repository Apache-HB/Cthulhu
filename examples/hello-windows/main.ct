import cc::lang as cc;

type UINT = cc::intUnsigned;
type UINT_PTR = cc::uint64;
type LONG_PTR = cc::int64;

type WPARAM = UINT_PTR;
type LPARAM = LONG_PTR;
type LRESULT = LONG_PTR;

type HINSTANCE = opaque;
type HANDLE = opaque;
type HICON = opaque;
type HCURSOR = opaque;
type HBRUSH = opaque;
type HMENU = opaque;
type HWND = opaque;

type LPCSTR = str;
type WORD = cc::shortUnsigned;
type ATOM = WORD;
type BOOL = cc::int;

type WNDPROC = def(HWND, UINT, WPARAM, LPARAM) -> LRESULT;

@layout(platform)
struct WNDCLASSA {
    style: UINT;
    lpfnWndProc: WNDPROC;
    cbClsExtra: cc::int;
    cbWndExtra: cc::int;
    hInstance: HINSTANCE;
    hIcon: HICON;
    hCursor: HCURSOR;
    hbrBackground: HBRUSH;
    lpszMenuName: LPCSTR;
    lpszClassName: LPCSTR;
}

@layout(platform)
struct POINT {
    x: cc::int;
    y: cc::int;
}

@layout(platform)
struct MSG {
    hwnd: HWND;
    message: UINT;
    wParam: WPARAM;
    lParam: LPARAM;
    time: UINT;
    pt: POINT;

    $: UINT;
}

@extern("RegisterClassA")
def RegisterClassA(cls: *WNDCLASSA): ATOM;

@extern("UnregisterClassA")
def UnregisterClassA(lpClassName: str, hInstance: HINSTANCE): BOOL;

@extern("DefWindowProcA")
def DefWindowProcA(hWnd: HWND, uMsg: uint, wParam: WPARAM, lParam: LPARAM): LRESULT;

@extern("CreateWindowExA")
def CreateWindowExA(
    dwExStyle: UINT,
    lpClassName: str,
    lpWindowName: str,
    dwStyle: UINT,
    x: cc::int, y: cc::int,
    nWidth: cc::int, nHeight: cc::int,
    hWndParent: HWND,
    hMenu: HMENU,
    hInstance: HINSTANCE,
    lpParam: opaque
): HWND;

@extern("ShowWindow")
def ShowWindow(hWnd: HWND, nCmdShow: int): cc::int;

@extern("UpdateWindow")
def UpdateWindow(hWnd: HWND): cc::int;

@extern("DestroyWindow")
def DestroyWindow(hWnd: HWND): cc::int;

@extern("PeekMessageA")
def PeekMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: UINT,
    wMsgFilterMax: UINT,
    wRemoveMsg: UINT
): cc::int;

@extern("GetMessageA")
def GetMessageA(
    lpMsg: *MSG,
    hWnd: HWND,
    wMsgFilterMin: UINT,
    wMsgFilterMax: UINT
): cc::int;

@extern("TranslateMessage")
def TranslateMessage(lpMsg: *MSG): cc::int;

@extern("DispatchMessageA")
def DispatchMessageA(lpMsg: *MSG): UINT;

@extern("PostQuitMessage")
def PostQuitMessage(nExitCode: cc::int): void;

const null = as<opaque>(0);

@entry(gui)
def start(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, pCmdLine: *char, nCmdShow: cc::int): cc::int {
    const szAppName = "Hello";
    const szTitle = "Hello, World!";

    var wndclass: WNDCLASSA = .{
        style = (1 | 2),
        lpfnWndProc = windowCallback,
        cbClsExtra = 0,
        cbWndExtra = 0,
        hInstance = hInstance,
        hIcon = null,
        hCursor = null,
        hbrBackground = null,
        lpszClassName = szAppName,
        lpszMenuName = null
    };

    RegisterClassA(&wndclass);

    var hWnd = CreateWindowExA(
        0,
        szAppName,
        szTitle,
        0xcf0000,
        0, 0,
        640, 480,
        null,
        null,
        hInstance,
        null
    );

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    var msg: MSG = noinit;
    while GetMessageA(&msg, null, 0, 0) != 0 {
        TranslateMessage(&msg);
        DispatchMessageA(&msg);
    }

    DestroyWindow(hWnd);
    UnregisterClassA(szAppName, hInstance);

    return msg.wParam;
}

def windowCallback(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT {
    if uMsg == 0x0002 { // WM_DESTROY
        PostQuitMessage(0);
        return 0;
    }

    return DefWindowProcA(hWnd, uMsg, wParam, lParam);
}
