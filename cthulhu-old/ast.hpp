#pragma once

#include "nodes.hpp"

//
// ast nodes generated by the parser
//

namespace cthulhu::ast {
    template<typename T>
    using vec = std::vector<T>;

    struct Node {
        virtual ~Node() { }

        virtual void visit(Printer* out) const = 0;
    };

    struct Ident : Node {
        utf8::string id;
    };

    struct Type : Node {

    };

    struct Decl : Node {

    };



    struct Stmt : Node {

    };

    struct Compound : Stmt {

    };

    struct While : Stmt {

    };

    struct Return : Stmt {

    };

    struct Branch : Stmt {

    };

    struct Alias : Stmt, Decl {

    };

    struct Var : Stmt, Decl {

    };



    struct Expr : Stmt {

    };

    struct Int : Expr {

    };

    struct String : Expr {

    };

    struct Bool : Expr {

    };

    struct Char : Expr {

    };

    struct Ternary : Expr {

    };

    struct Subscript : Expr {

    };

    struct Unary : Expr {

    };

    struct Binary : Expr {

    };

    struct Lookup : Expr {

    };

    struct Coerce : Expr {

    };

    struct Call : Expr {

    };

    struct Access : Expr {

    };

    struct Pointer : Type {
        Type* type;
    };

    struct Closure : Type {
        vec<Type*> args;
        Type* result;
    };

    struct Array : Type {
        Type* type;
        Expr* size;
    };

    struct Name : Node {
        Ident* ident;
        vec<Type*> types;
    };

    struct Qualified : Type {
        vec<Name*> names;
    };
}
