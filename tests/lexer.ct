import lang::hints(r);


enum TokenType {
    ident,
    key,
    eof
}

alias str = @type("");

enum Keyword : str {
    kdef = "def",
    kstruct = "struct",
    kunion = "union",
    kobject = "object",
    kalias = "alias"
}

union TokenData {
    num: u64;
    str: str;
    id: str;
    key: Keyword;
}

struct Token {
    type: TokenType;
}

object Lexer {
    alias Self = Lexer;

    @private var in: *istream;
    @private var ahead: i32;

    @private def get(self: &Self) -> i32 {
        var temp = self.ahead;
        ahead = self.in->next();
        return temp;
    }

    @private def peek(self: &Self) -> i32 {
        return self.ahead;
    }

    def new(stream: *istream) -> Self {
        var out = Self {
            [in] = stream,
            [ahead] = stream->next()
        };

        return out;
    }

    def skipWhitespace(self: &Self) -> i32 {
        var n = self.get();
        while (n == ' ' || n == '\n' || n == '\t') {
            n = self.get();
        }
        return n;
    }

    def next(self: &Self) -> Token {
        var n = self.skipWhitespace();

        if (n == -1) {
            return { TokenType::eof };
        }
    }
}