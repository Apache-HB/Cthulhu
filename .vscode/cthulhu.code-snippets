{
	// Place your cthulhu workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Meson compiler module": {
		"scope": "meson",
		"prefix": "module",
		"body": [
			"$1_api = configure_file("
			"	input : api_header,"
			"	output : 'ctu_$1_api.h',"
			"	configuration : { 'MOD': '$2' }"
			")"
			""
			"$1_include = include_directories('.', 'include')"
			""
			"src = []"
			""
			"lib$1 = library('$1', src,"
			"   build_by_default : false,"
			"	c_args : [ '-DCT_$2_BUILD=1' ],"
			"	dependencies : [ core ],"
			"	include_directories : [ $1_include ]"
			")"
			""
			"$1 = declare_dependency("
			"	link_with : lib$1,"
			"	include_directories : [ $1_include ]"
			")"
			""
			"install_headers($1_api, subdir : '$1')"
			"install_subdir('include', install_dir : 'include', strip_directory : true)"
			""
		]
	},
	"Flex prelude": {
		"scope": "lex",
		"prefix": "prelude",
		"body": [
			"%option extra-type=\"scan_t*\""
			"%option 8bit nodefault"
			"%option noyywrap noinput nounput"
			"%option noyyalloc noyyrealloc noyyfree"
			"%option reentrant bison-bridge bison-locations"
			"%option never-interactive batch"
			"%option prefix=\"$1\""
			""
			"%{"
			"#include \"$1_bison.h\""
			"#include \"interop/flex.h\""
			"#include \"interop/memory.h\""
			"#include \"cthulhu/events/events.h\""
			"%}"
			""
			"WS [ \\t\\r\\v\\n\\f]"
			""
			"%%"
			""
			"{WS}+ ;"
			""
			". {"
			"	$1_scan_t *scan = $1_scan_context(yyextra);"
			"	evt_scan_unknown(scan->reports, node_new(yyextra, *yylloc), yytext);"
			"}"
			""
			"%%"
			""
			"FLEX_MEMORY($1)"
			""
		]
	},
	"Bison prelude": {
		"scope": "yacc",
		"prefix": "prelude",
		"body": [
			"%define parse.error verbose"
			"%define api.pure full"
			"%lex-param { void *scan }"
			"%parse-param { void *scan } { scan_t *x }"
			"%locations"
			"%expect 0"
			"%define api.prefix {$1}"
			""
			"%code top {"
			"	#include \"interop/flex.h\""
			"	#include \"interop/bison.h\""
			"}"
			""
			"%code requires {"
			"	#include \"$1/ast.h\""
			"	#include \"$1/scan.h\""
			"	#define YYSTYPE $2STYPE"
			"	#define YYLTYPE $2LTYPE"
			"}"
			""
			"%{"
			"int $1lex(void *lval, void *loc, scan_t *scan);"
			"void $1error(where_t *where, void *state, scan_t *scan, const char *msg);"
			"%}"
			""
			"%start program"
			""
			"%%"
			""
			"program: %empty ;"
			""
			"%%"
			""
		]
	}
}