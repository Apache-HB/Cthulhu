unit    <- import* decl*

# import syntax
import  <- 'using' LIST(ident, '::') items? ';'
items   <- '(' (LIST(ident, ',') / '...') ')'

# toplevel declarations
decl        <- attribs* (alias / variant / union / record / func / var ';')

attribs     <- '@' attrib / '@' '[' LIST(attrib, ',') ']'
attrib      <- qualified call?

alias       <- 'using' ident '=' type ';'
union       <- 'union' ident '{' fields '}'
record      <- 'record' ident '{' fields '}'
variant     <- 'variant' ident (':' type)? '{' case* '}'
func        <- 'def' ident ('(' params? ')')? result? body
result      <- ':' type
params      <- field init? (',' params)? 
body        <- ';' / '=' expr ';' / compound
var         <- 'var' names init?
names       <- ident '(' LIST(ident, ',') ')' / name / '[' LIST(name, ',') ']'
name        <- ident (':' type)?
init        <- OP('=') expr

# tagged union syntax
case    <- 'case' ident data? ('=' expr)? ';'
data    <- '(' LIST(field, ',') ')'

field   <- ident ':' type
fields  <- (field ';')*

# type syntax
type        <- attribs* (pointer / array / closure / qualified)

array       <- '[' type (':' expr)? ']'
pointer     <- '*' type
closure     <- '(' LIST(type, ',')? ')' '->' type
qualified   <- LIST(ident, '::')

# statements

stmt        <- compound / return / break / continue / while / if / guard / expr ';' / switch / assign / for / asm / with
for         <- 'for' range else?
range       <- '(' names '..' expr ')' stmt / names '..' expr compound
while       <- 'while' label? cond else?
continue    <- 'continue' ';'
break       <- 'break' ident? ';'
return      <- 'return' expr? ';'
compound    <- '{' stmt* '}'
if          <- 'if' cond elif* else?
elif        <- 'else' 'if' cond
else        <- 'else' stmt
label       <- ':' ident
cond        <- expr compound / '(' expr ')' stmt / first condition? compound / '(' first ')' stmt
first       <- 'var' names '=' expr
guard       <- var compound? ';'
switch      <- 'switch' match
match       <- expr '{' branches '}' / '(' expr ')' branches / 'var' names '=' expr condition? '{' branches '}'
branches    <- branch* default?
branch      <- 'case' expr ':' stmt*
default     <- 'else' ':' stmt*
assign      <- expr asop expr ';'
condition   <- 'when' expr
with        <- 'with' cond

asop        <- < '=' / '+=' / '-=' / '/=' / '*=' / '%=' / '&=' / '|=' / '^=' / '<<=' / '>>=' >

asm     <- 'asm' '{' opcode* '}'
opcode  <- ident (LIST(operand, ',')? ';' / ':')
operand <- (expr / '[' expr ']' / '$' '(' expr ')')

expr <- OP(bexpr)

# expressions
bexpr    <- prefix (binop prefix)* {
            precedence
                L !
                L || &&
                L & |
                L ^
                L == !=
                L < <= > >=
                L << >>
                L + -
                L / % *
        }

binop    <- < '+' !'=' 
            / '-' !'=' 
            / '*' !'=' 
            / '/' !'=' 
            / '%' !'=' 
            / '&' !'='
            / '|' !'='
            / '!=' / '!'
            / '==' / '&&' / '||' 
            / '<<' !'=' 
            / '>>' !'=' / '<=' / '>=' / '<' / '>'
        >
    
unop   <- < '!' / '+' / '-' / '*' / '&' >

atom <- (number / qualified / 'true' / 'false' / string/ OP('(') expr OP(')')) postfix*

prefix  <- atom / OP(unop) prefix / '{' args? '}'
postfix <- '[' expr ']' / OP('.') ident / OP('->') ident / call / ternary / 'as' type
call    <- OP('(') args? OP(')')
ternary <- OP('?') expr? OP(':') expr
args    <- expr (OP(',') args)? / named
named   <- OP('.') ident OP('=') expr (OP(',') named)?

# basic blocks
number  <- < (base2 / base10 / base16) ident? > ~spacing

base10  <- < [0-9]+ >
base2   <- < '0b' [01]+ >
base16  <- < '0x' [0-9a-fA-F]+ >

string  <- < ['] (!['] char)* ['] / ["] (!["] char)* ["] >
char    <- '\\' [nrt'"\[\]\\] / !'\\' .

ident   <- < [a-zA-Z_][a-zA-Z0-9_]* > ~spacing

%whitespace <- spacing

spacing     <- (comment / space)*
space       <- [ \t\r\n]
comment     <- '#' (!line .)* line?
line        <- [\r\n]+

OP(I)       <- I ~spacing
LIST(I, D)  <- I (D I)*
