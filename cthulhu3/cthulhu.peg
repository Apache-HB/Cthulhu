unit    <- import* decl*

import  <- 'using' LIST(ident, '::') items? ';'

items   <- '(' (LIST(ident, ',') / '...') ')'



decl    <- alias / variant / union / record

alias   <- 'using' ident '=' type ';'

union   <- 'union' ident '{' fields '}'

record  <- 'record' ident '{' fields '}'

variant <- 'variant' ident (':' type)? '{' case* '}'

case    <- 'case' ident data? ('=' expr)? ';'

data    <- '(' LIST(field, ',') ')'


field   <- ident ':' type

fields  <- (field ';')*



type    <- pointer / array / closure / qualified

array   <- '[' type (':' expr)? ']'

pointer <- '*' type

closure <- '(' LIST(type, ',')? ')' '->' type

qualified   <- LIST(ident, '::')


expr    <- atom (op atom)* {
            precedence
                L !
                L || &&
                L & |
                L ^
                L == !=
                L < <= > >=
                L << >>
                L + -
                L / % *
        }

op  <-  < '!' / '+' / '-' / '*' / '/' / '%' / '==' / '!=' / '&&' / '||' / '<<' / '>>' / '<' / '<=' / '>' / '>=' >

atom <- < ('(' expr ')' / number / qualified) postfix* >

postfix <- '[' expr ']' / '.' ident / '->' ident

number  <- < [0-9]+ ident? >

ident   <- < [a-zA-Z_][a-zA-Z0-9_]* >

%whitespace <- (comment / space)*

space       <- [ \t\r\n]
comment     <- '#' (!line .)* line?
line        <- [\r\n]+

LIST(I, D)  <- I (D I)*