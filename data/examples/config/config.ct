module example::config;

import win32;
import cstdlib as libc;

export struct StringView {
    front: *const(char);
    back: *const(char);
}

export struct ConfigEntry {
    key: StringView;
    value: StringView;
}

export struct ConfigSection {
    name: StringView;
    firstEntry: uint;
    lastEntry: uint;
}

export struct ConfigFile {
    fileHandle: win32::HANDLE;
    viewHandle: win32::HANDLE;

    fileView: [*]char;
    fileSize: usize;

    sections: [*]ConfigSection;
    sectionCount: uint;

    entries: [*]ConfigEntry;
    entryCount: uint;
}

def reportErrorMessage(name: str) {
    const lastError = win32::GetLastError();
    libc::printf("%s: %d\n", name, lastError);
}

struct Lexer {
    front: *char;
    back: *char;

    current: *char;
}

export def stringViewLength(view: StringView): usize = cast(view.back as uptrdiff) - cast(view.front as uptrdiff);

def isAlpha(letter: char): bool = (letter >= 'a' && letter <= 'z') || (letter >= 'A' && letter <= 'Z');
def isSpace(letter: char): bool = letter == ' ' || letter == '\t' || letter == '\n' || letter == '\r';

def readUntil(current: *char, terminator: char): StringView {
    var front = current;
    while *current != terminator && *current != '\0' {
        current = &current[1];
    }

    return .{
        front = front,
        back = current
    };
}

const kGlobalSectionName = "global";

export def openConfigFile(path: str): ConfigFile {
    var file = mapFileHandle(path);
    if file.fileView == libc::null {
        return .{ };
    }

    var sections: [*]ConfigSection = libc::malloc(__sizeof(ConfigSection) * 64);
    var entries: [*]ConfigEntry = libc::malloc(__sizeof(ConfigEntry) * 256);

    file.sections = sections;
    file.entries = entries;

    sections[0] = .{
        name = .{
            front = kGlobalSectionName,
            back = &kGlobalSectionName[6]
        },
        firstEntry = 0,
        lastEntry = 0
    };

    file.sectionCount = 1;
    file.entryCount = 0;

    var index: uint = 0;
    while index < file.fileSize {
        const letter = file.fileView[index];
        index = index + 1;

        if isSpace(letter) {
            continue;
        }

        if letter == '[' {
            const name = readUntil(file.fileView + index, ']');
            index = index + stringViewLength(name) + 1;

            sections[file.sectionCount] = .{
                name = name,
                firstEntry = file.entryCount,
                lastEntry = file.entryCount
            };

            file.sectionCount = file.sectionCount + 1;

            continue;
        }

        if isAlpha(letter) {
            index = index - 1;
            var key = readUntil(file.fileView + index, '=');
            key.back = &key.back[-1];

            index = index + stringViewLength(key);

            const value = readUntil(file.fileView + index, '\n');
            index = index + stringViewLength(value) + 1;

            entries[file.entryCount] = .{
                key = key,
                value = value
            };

            sections[file.sectionCount - 1].lastEntry = file.entryCount;

            file.entryCount = file.entryCount + 1;

            continue;
        }

        if letter == ';' {
            const comment = readUntil(file.fileView + index, '\n');
            index = index + stringViewLength(comment) + 1;

            continue;
        }
    }

    return file;
}

export def closeConfigFile(file: ConfigFile) {
    win32::CloseHandle(file.viewHandle);
    win32::CloseHandle(file.fileHandle);
}


def mapFileHandle(path: str): ConfigFile {
    var fileHandle = win32::CreateFileA(
        /* lpFileName */ path,
        /* dwDesiredAccess */ win32::GENERIC_READ,
        /* dwShareMode */ win32::FILE_SHARE_READ,
        /* lpSecurityAttributes */ libc::null,
        /* dwCreationDisposition */ win32::OPEN_EXISTING,
        /* dwFlagsAndAttributes */ win32::FILE_ATTRIBUTE_NORMAL,
        /* hTemplateFile */ libc::null
    );

    if fileHandle == win32::INVALID_HANDLE_VALUE {
        reportErrorMessage("CreateFileA");
        win32::CloseHandle(fileHandle);

        return .{ };
    }

    var fileSize: win32::LARGE_INTEGER = noinit;
    if win32::GetFileSizeEx(fileHandle, &fileSize) == 0 {
        reportErrorMessage("GetFileSizeEx");
        win32::CloseHandle(fileHandle);

        return .{ };
    }

    var viewHandle = win32::CreateFileMappingA(
        /* hFile */ fileHandle,
        /* lpAttributes */ libc::null,
        /* flProtect */ win32::PAGE_READONLY,
        /* dwMaximumSizeHigh */ as<win32::DWORD>(fileSize.QuadPart >> 32),
        /* dwMaximumSizeLow */ as<win32::DWORD>(fileSize.QuadPart & 0xFFFFFFFF),
        /* lpName */ libc::null
    );

    if viewHandle == libc::null {
        reportErrorMessage("CreateFileMappingA");
        win32::CloseHandle(fileHandle);
        win32::CloseHandle(viewHandle);

        return .{ };
    }

    var fileView = win32::MapViewOfFile(
        /* hFileMappingObject */ viewHandle,
        /* dwDesiredAccess */ win32::FILE_MAP_READ,
        /* dwFileOffsetHigh */ 0,
        /* dwFileOffsetLow */ 0,
        /* dwNumberOfBytesToMap */ 0
    );

    if fileView == libc::null {
        reportErrorMessage("MapViewOfFile");
        win32::CloseHandle(fileHandle);
        win32::CloseHandle(viewHandle);

        return .{ };
    }

    return .{
        fileHandle = fileHandle,
        viewHandle = viewHandle,

        fileView = fileView,
        fileSize = fileSize.QuadPart
    };
}
