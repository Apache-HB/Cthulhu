module example::config;

import win32;
import cstdlib;

const null = as<opaque>(0);

export struct StringView {
    front: *char;
    back: *char;
}

export struct ConfigEntry {
    key: StringView;
    value: StringView;
}

export struct ConfigSection {
    name: StringView;
    firstEntry: uint;
    lastEntry: uint;
}

export struct ConfigFile {
    fileHandle: win32::HANDLE;
    viewHandle: win32::HANDLE;

    fileView: [*]char;
    fileSize: usize;

    sections: [*]ConfigSection;
    sectionCount: usize;

    entries: [*]ConfigEntry;
    entryCount: usize;
}

def reportErrorMessage(name: str) {
    const lastError = win32::GetLastError();
    cstdlib::printf("%s: %d\n", name, lastError);
}

export def openConfigFile(path: str): ConfigFile {
    var fileHandle = win32::CreateFileA(
        /* lpFileName */ path,
        /* dwDesiredAccess */ win32::GENERIC_READ,
        /* dwShareMode */ win32::FILE_SHARE_READ,
        /* lpSecurityAttributes */ null,
        /* dwCreationDisposition */ win32::OPEN_EXISTING,
        /* dwFlagsAndAttributes */ win32::FILE_ATTRIBUTE_NORMAL,
        /* hTemplateFile */ null
    );

    if fileHandle == win32::INVALID_HANDLE_VALUE {
        reportErrorMessage("CreateFileA");
        win32::CloseHandle(fileHandle);

        return .{ };
    }

    var fileSize: win32::LARGE_INTEGER = noinit;
    if win32::GetFileSizeEx(fileHandle, &fileSize) == 0 {
        reportErrorMessage("GetFileSizeEx");
        win32::CloseHandle(fileHandle);

        return .{ };
    }

    var viewHandle = win32::CreateFileMappingA(
        /* hFile */ fileHandle,
        /* lpAttributes */ null,
        /* flProtect */ win32::PAGE_READONLY,
        /* dwMaximumSizeHigh */ as<win32::DWORD>(fileSize.QuadPart >> 32),
        /* dwMaximumSizeLow */ as<win32::DWORD>(fileSize.QuadPart & 0xFFFFFFFF),
        /* lpName */ null
    );

    if viewHandle == null {
        reportErrorMessage("CreateFileMappingA");
        win32::CloseHandle(fileHandle);
        win32::CloseHandle(viewHandle);

        return .{ };
    }

    var fileView = win32::MapViewOfFile(
        /* hFileMappingObject */ viewHandle,
        /* dwDesiredAccess */ win32::FILE_MAP_READ,
        /* dwFileOffsetHigh */ 0,
        /* dwFileOffsetLow */ 0,
        /* dwNumberOfBytesToMap */ 0
    );

    if fileView == null {
        reportErrorMessage("MapViewOfFile");
        win32::CloseHandle(fileHandle);
        win32::CloseHandle(viewHandle);

        return .{ };
    }

    return .{
        fileHandle = fileHandle,
        viewHandle = viewHandle,

        fileView = fileView,
        fileSize = fileSize.QuadPart
    };
}

export def closeConfigFile(file: ConfigFile) {
    win32::CloseHandle(file.viewHandle);
    win32::CloseHandle(file.fileHandle);
}
