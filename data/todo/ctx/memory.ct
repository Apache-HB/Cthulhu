module simcoe::core;

import std(String, Vec);

export variant MemoryUnit : uint {
    bytes,
    kilobytes,
    megabytes,
    gigabytes,
    terabytes
}

const kSizes: []usize = [
    [MemoryUnit::bytes] = 1,
    [MemoryUnit::kilobytes] = 1024,
    [MemoryUnit::megabytes] = 1024 * 1024,
    [MemoryUnit::gigabytes] = 1024 * 1024 * 1024,
    [MemoryUnit::terabytes] = 1024 * 1024 * 1024 * 1024
];

const kNames: []str = [
    [MemoryUnit::bytes] = "b",
    [MemoryUnit::kilobytes] = "kb",
    [MemoryUnit::megabytes] = "mb",
    [MemoryUnit::gigabytes] = "gb",
    [MemoryUnit::terabytes] = "tb"
];

export object Memory {
    new default(bytes: usize, unit: MemoryUnit) {
        self.bytes = bytes * kSizes[unit];
    }

    new b(bytes: usize): default(bytes, MemoryUnit::bytes) { }
    new kb(kilobytes: usize): default(kilobytes, MemoryUnit::kilobytes) { }
    new mb(megabytes: usize): default(megabytes, MemoryUnit::megabytes) { }
    new gb(gigabytes: usize): default(gigabytes, MemoryUnit::gigabytes) { }
    new tb(terabytes: usize): default(terabytes, MemoryUnit::terabytes) { }
    
    def b: usize = self.bytes;
    def kb: usize = self.bytes / kSizes[MemoryUnit::kilobytes];
    def mb: usize = self.bytes / kSizes[MemoryUnit::megabytes];
    def gb: usize = self.bytes / kSizes[MemoryUnit::gigabytes];
    def tb: usize = self.bytes / kSizes[MemoryUnit::terabytes];

    def toString: String {
        if bytes == 0 {
            return "0b";
        }

        var parts: Vec!<String> = default;
        var total = self.bytes;

        for fmt : MemoryUnit {
            const size = total / kSizes[fmt];
            if size <= 0 { continue; }

            parts.append(f"{size}{kNames[fmt]}");
            total %= kSizes[fmt];
        }

        return join("+", parts);
    }

    private var bytes: usize;
}

def test {
    const mem1: Memory = default(MemoryUnit::megabytes, 1);
    const mem2 = Memory::mb(1);
    const mem3 = Memory::tb(64);

    assert mem1.mb() == 1 : "Memory::mb(1) failed";
    assert mem2.mb() == 1 : "Memory::mb(1) failed";
    assert mem3.tb() == 64 : "Memory::tb(64) failed";
}
