{
    "info": {
        "id": "pl0",
        "name": "PL/0",
        "version": { "major": 1, "minor": 1, "patch": 0 },
        "license": "GPL-3.0-only",
        "author": "Elliot Haisley",
        "description": "PL/0 language frontend"
    },
    "commandline": {
        "use_setup_options": false,
        "options": {
            "limits": {
                "brief": "Control language implementation limits",
                "children": {
                    "int_width": {
                        "brief": "The width of the number type in bits, must be a power of 2",
                        "args": [
                            { "long": "pl0-int-width" }
                        ],
                        "int": {
                            "min": "8",
                            "max": "64",
                            "default": "32"
                        }
                    }
                }
            },
            "print_format": {
                "brief": "Control the format string used for printing integers",
                "args": [
                    { "long": "pl0-print-format" }
                ],
                "string": {
                    "default": "%d"
                }
            },
            "extensions": {
                "brief": "Enable or disable language extensions",
                "args": [
                    { "long": "pl0-lang-extensions" },
                    { "short": "pl0-exts" }
                ],
                "flags": {
                    "modules": true,
                    "nested_procedures": true
                }
            },
            "combo_enum": {
                "brief": "Control the behavior of the combo enum",
                "args": [
                    { "long": "pl0-combo-enum" }
                ],
                "choices": [
                    "none",
                    "left",
                    "right"
                ],
                "default": "none"
            }
        }
    },
    "nodes": [
        {
            "name": "stmt"
        },
        {
            "name": "expr",
            "parent": "stmt"
        },
        {
            "name": "int",
            "parent": "expr",
            "fields": [
                { "name": "digit", "type": "mpz" }
            ]
        },
        {
            "name": "ident",
            "parent": "expr",
            "fields": [
                { "name": "name", "type": "string" }
            ]
        },
        {
            "name": "call",
            "parent": "stmt",
            "fields": [
                { "name": "procedure", "type": "string" }
            ]
        },
        {
            "name": "print",
            "parent": "stmt",
            "fields": [
                { "name": "expression", "type": { "ast": "expr" } }
            ]
        },
        {
            "name": "unary",
            "parent": "expr",
            "fields": [
                { "name": "unary", "type": { "enum": "unary" } },
                { "name": "operand", "type": { "ast": "expr" } }
            ]
        },
        {
            "name": "binary",
            "parent": "expr",
            "fields": [
                { "name": "binary", "type": { "enum": "binary" } },
                { "name": "lhs", "type": { "ast": "expr" } },
                { "name": "rhs", "type": { "ast": "expr" } }
            ]
        }
    ],
    "grammar": {
        "comments": {
            "lineComment": "//",
            "blockComment": [
                [ "/*", "*/" ]
            ]
        },
        "pairs": [
            [ "LPAREN", "RPAREN" ],
            [ "START", "END" ]
        ],
        "tokens": {
            "START": {
                "pattern": "(?i:begin)",
                "group": "keywords"
            },
            "END": {
                "pattern": "(?i:end)",
                "group": "keywords"
            },
            "CONST": {
                "pattern": "(?i:const)",
                "group": "keywords"
            },
            "VAR": {
                "pattern": "(?i:var)",
                "group": "keywords"
            },
            "MODULE": {
                "pattern": "(?i:module)",
                "group": "keywords"
            },
            "IMPORT": {
                "pattern": "(?i:import)",
                "group": "keywords"
            },
            "PROCEDURE": {
                "pattern": "(?i:procedure)",
                "group": "keywords"
            },
            "IF": {
                "pattern": "(?i:if)",
                "group": "keywords"
            },
            "THEN": {
                "pattern": "(?i:then)",
                "group": "keywords"
            },
            "WHILE": {
                "pattern": "(?i:while)",
                "group": "keywords"
            },
            "DO": {
                "pattern": "(?i:do)",
                "group": "keywords"
            },
            "CALL": {
                "pattern": "(?i:call)",
                "group": "keywords"
            },
            "ODD": {
                "pattern": "(?i:odd)",
                "group": "keywords"
            },
            "IDENT": {
                "pattern": "[a-zA-Z_][a-zA-Z0-9_]*",
                "group": "identifiers"
            },
            "NUMBER": {
                "pattern": "[0-9]+",
                "group": "literals"
            },
            "SEMICOLON": {
                "symbol": ";",
                "group": "punctuation"
            },
            "DOT": {
                "symbol": ".",
                "group": "punctuation"
            },
            "COMMA": {
                "symbol": ",",
                "group": "punctuation"
            },
            "ASSIGN": {
                "symbol": ":=",
                "group": "operators"
            },
            "EQUALS": {
                "symbol": "=",
                "group": "operators"
            },
            "NOTEQUAL": {
                "symbol": "!=",
                "group": "operators"
            },
            "LESS": {
                "symbol": "<",
                "group": "operators"
            },
            "GREATER": {
                "symbol": ">",
                "group": "operators"
            },
            "LESSEQ": {
                "symbol": "<=",
                "group": "operators"
            },
            "GREATEQ": {
                "symbol": ">=",
                "group": "operators"
            },
            "LPAREN": {
                "symbol": "(",
                "group": "punctuation"
            },
            "RPAREN": {
                "symbol": ")",
                "group": "punctuation"
            },
            "ADD": {
                "symbol": "+",
                "group": "operators"
            },
            "SUB": {
                "symbol": "-",
                "group": "operators"
            },
            "MUL": {
                "symbol": "*",
                "group": "operators"
            },
            "DIV": {
                "symbol": "/",
                "group": "operators"
            },
            "PRINT": {
                "pattern": "!",
                "group": "operators"
            }
        },
        "rules": {

        }
    }
}