/**
@page contrib Contributing
@addindex contrib

<h3>Source tree structure</h3>

  - `data` - various data files
    - `meson` - cross files for various platforms
    - `scripts` - automation for arduous setup tasks
    - `docs` - documentation

  - `driver` - language frontends
    - `pl0` - pl0 frontend, good for referencing how to use the common framework
    - `oberon` - oberon-2 frontend (WIP)
    - `ctu` - cthulhu language frontend (WIP)
    - `jvm` - jvm classfile consumer (TODO)
    - `cc` - C11 frontend (TODO)
    - `example` - example frontend

  - `interface` - user facing components used to interact with drivers and the collection
    - `cli` - command line user interface (TODO)
    - `gui` - graphical user interface (TODO)
    - `harness` - end to end test harness
    - `support` - common interface support library

  - `common` - common code
    - `core` - header only compiler specific
    - `stacktrace` - backtrace retrieval
    - `base` - base utils
    - `memory` - memory allocation and arenas
    - `interop` - flex & bison helper functions
    - `platform` - platform detail wrappers
    - `io` - file io abstraction
    - `notify` - error reporting tools
    - `scan` - flex & bison scanning tools
    - `std` - collections and data structures
    - `config` - configuration schema tools
    - `display` - text formatting for displaying to a user

  - `cthulhu` - compiler framework library
    - `argparse` - command line parsing
    - `emit` - ssa emitter
    - `tree` - common typed ast
    - `util` - common utilities
    - `mediator` - code required to orchestrate communication between languages, the framework, and frontends
    - `check` - validates state for various structures
    - `ssa` - tree to ssa transforms, as well as optimizations

  - `subprojects` - dependencies
    - `mini-gmp` - fallback gmp library if system gmp isnt installed

  - `tests` - tests
    - `lang` - language specific tests
    - `unit` - compiler code unit tests

<h3>Coding rules</h3>

1. All features that require platform specific code must have a reasonable fallback implementation.
  - See @ref Stacktrace for an example of this, doing nothing can be a reasonable fallback.

2. Everything must be implemented in standard C11
  - No compiler extensions in common code.

3. No io or filesystem access that isnt marhshalled by @ref io_t or @ref fs_t
  - Makes porting to systems with non tradition IO easier.

4. The build process must only rely on C and meson
  - Optional features may require python/C++
  - To aid porting to systems that may not have a big ecosystem

5. All platform specific code must go in the @ref OS module

<h3>Styleguide</h3>

<h4>Declarations</h4>
  - new and delete methods should be named `type_new` and `type_delete` respectivley
  - files contents should be layed out in the following order

```c
// includes

// macros

// typedefs

// forward declarations

// implementations
```

  - use `const` whenever its easy to do so
  - use `#pragma once` over include guards
  - use `#define` for constant unrelated values in headers
  - use `static const` for constant values in source files
  - use `enum` for defining related constant values

  <h4>Banned features</h4>
  - no VLAs & `alloca`, hard to debug, causes crashes very easily
  - no `volatile`, it doesnt do what you think it does
  - no compiler specific extensions without ifdef guards
  - no mutable global state, all code must be reentrant and thread safe
  - no inline asm
  - no thread local values, these are global mutable state

*/
