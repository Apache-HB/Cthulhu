using std(...);
using stx::vk(vkInstance, VkInstanceCreateInfo);

using x = @yes y;

@[entry("wWinMain"), abi(win64)]
def main: void {
    var info = VkApplicationInfo(
        .sType = VK_STRUCTURE_TYPE_APPLICATION_INFO,
        .pApplicationName = "Hello Vulkan",
        .applicationVersion = VK_MAKE_VERSION(1, 0, 0),
        .pEngineName = "No Engine",
        .engineVersion = VK_MAKE_VERSION(1, 0, 0),
        .apiVersion = VK_API_VERSION_1_0
    );

    var create = VkInstanceCreateInfo(
        .sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
        .pApplicationInfo = &info
    );

    var instance: VkInstance;

    if var err = vkCreateInstance(&create, null, &instance) when err != VK_SUCCESS {
        io::print(fmt("vkCreateInstance {}", err));
        exit(1);
    }

    for i .. range(25) {
    
    }
    
    with (var file = unwrap! open("file")) {
        file.write("hello");
    }
    
    for ([idx, val] .. zip(range(25), range(25))) 
        num += idx;
    
    var x = eval! 10 ?: 1;

    asm { 
        mov rax, 25;
        mov rbx, $(x);
        mov [0xB8000], 'a' | 7 << 8;
    here:
        syscall;
        int 0x80;
        jmp here;
    }
}

def name(): type {

}

def name(a: int) = 5;

def name(a: int = 5, a: bool);