using std::prelude(...);
using std::rt::stdio(fopen, fclose, fread, fwrite);
using a::b::c;
using a::b(...);
using a(c, d, e);

def fib(i: int): int = (i == 0 || i == 1) ? i : fib(i - 1)  + fib(i - 2);

def main(argc: int, argv: **char): int {
    var result: int = fib(10);

    println("fib(10) = %d\n", result);

    return 0;
    
    var $ = 10;
}

record a {
    i: int[0..1],
    b: int
}

record b {
    it: *b
}

@yes
record c {

}

using err = void!void;
using err2 = !int;

var name = 5;
var [name] = 5;
var name::yes(v, a) = some(x);

def stuff<T, E1, E2>(b: bool, func1: () -> T!E1, func2: () -> T!E2): T!(E1 / E2) {
  if (b)
    return try func1();
  else
    return func2();
}

def main2 {
    stuff(true, 
        [a, b, c](a: int) -> str!(int / bool) { return "hello"; }, 
        [&f] -> str!float { raise float(5); }
    );
}

@layout(packed)
record vaddr {
    physical_page_offset: u64[0..11],
    page_table_offset: u64[12..20],
    page_directory_offset: u64[21..29],
    page_directory_pointer_offset: u64[30..38],
    page_map_level4_offset: u64[39..47],
    $: u64[48..63]
}

@layout(packed)
record cr0 {
    protected_mode_enable: bool[0],
    monitor_coprocessor: bool[1],
    emulation: bool[2],
    task_switched: bool[3],
    extension_type: bool[4],
    numeric_error: bool[5],
    write_protected: bool[16],
    alignment_mask: bool[18],
    not_write_through: bool[29],
    cache_disable: bool[30],
    paging: bool[31]
}

@layout(packed)
record legacy_call_gate_descriptor {
    target_code_segment_offset: u32[0..15, 48..63],
    target_code_segment_selector: u16[16..31],
    parameter_count: u8[32..36],
    $: u8[37..39],
    type: u8[40..43],
    $: u8[44],
    level: u8[45..46],
    present: bool[47]
}
