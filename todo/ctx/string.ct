module std.string;

object String(T: type = char) {
    type Self = String!T;

    def new(it: in str): Self {
        var len = strlen(it);
        var data = new T[len];
        data <- it : len;

        return Self {
            .first = data,
            .last = data + len,
            .total = data + len
        };
    }

    def delete(self: inout Self) {
        delete[self.size()] front;
    }

    def length(self: in Self): usize 
        = (self.back - self.front) as usize;
    def size(self: in Self): usize 
        = (self.total - self.front) as usize;

    def isEmpty(self: in Self): bool 
        = self.length() == 0;

    def at(index: in usize): &T = self.front[index];

    def append(self: inout Self, other: in Self): &Self {
        var ourLength = self.length();
        var otherLength = other.length();

        self.resize(ourLength + otherLength);

        front + ourLength <- other.front : otherLength;
    }

    def equals(self: in Self, other: in Self): bool {
        var ourLength = self.length();

        if self.length() != other.length() { return false; }

        for index in 0 : ourLength {
            if self[index] != other[index] { return false; }
        }
        
        return true;
    }

    private def resize(self: inout Self, newSize: in usize) {
        var oldSize = self.size();
        if oldSize >= newSize { return; }

        var newData = new T[newSize];
        newData <- self.front : oldSize;

        delete[oldSize] self.front;

        self = { 
            .front = newData, 
            .back = newData + oldSize, 
            .total = newData + newSize 
        };
    }

    // the front of the string
    private var front: *T;

    // the back of the string
    private var back: *T;

    // the back of the allocated memory
    private var total: *T;
}
